//
//  LegalPersonPicker.swift
//  Financer
//
//  Created by Julian Schumacher on 24.12.22.
//

import SwiftUI
import CoreData

/// The View to pick a legal Person
/// for a single Finance
internal struct LegalPersonPicker: View {
    
    /// The Action to dismiss this View
    @Environment(\.dismiss) private var dismiss : DismissAction
    
    // Preview Code Start
    // (Comment to build)
    //
    // This Code is used in development because it works with the preview.
    // Solution from: https://developer.apple.com/forums/thread/654126
    
    /// The Finances fetched from
    /// the Core Database
    @FetchRequest(fetchRequest: legalPersonFetchRequest)
    private var legalPersons : FetchedResults<LegalPerson>
    
    /// This is the fetch Request to fetch all the Finances
    /// from the Core Data Persistence Storage
    static private var legalPersonFetchRequest : NSFetchRequest<LegalPerson> {
        let request = LegalPerson.fetchRequest()
        request.sortDescriptors = [
            NSSortDescriptor(
                keyPath: \LegalPerson.name,
                ascending: false
            )
        ]
        return request
    }
    // Preview Code End
    
    
    // Production Code Start
    // (Uncomment to build)
    //
    // This Code is used in production, becasue this Code
    // is generated by Apple and it is shorter.
    // This just doesn't work with the Preview
    
    /// The Finances fetched form the
    /// Code Database.
    //    @FetchRequest(
    //        sortDescriptors: [
    //            SortDescriptor(\LegalPerson.name, order: .reverse)
    //        ]
    //    ) private var legalPersons : FetchedResults<LegalPerson>
    // Production Code End
    
    /// The Type this View currently represents
    @State private var legalPersonType : LegalPerson.LegalPersonType = .none
    
    /// The Legal Person beeing chosen
    @Binding internal var legalPerson : LegalPerson?
    
    var body: some View {
        VStack {
            Picker("Type", selection: $legalPersonType) {
                ForEach(LegalPerson.LegalPersonType.allCases) {
                    person in
                    Text(person.rawValue.capitalized)
                }
            }
            .pickerStyle(.segmented)
            list()
            NavigationLink {
                AddLegalPerson()
            } label: {
                Label("Add Legal Person", systemImage: "plus")
            }
        }
        .navigationTitle("Legal Person Picker")
    }
    
    /// Builds and returns the List of Legal Person
    /// matching the current Selection of
    /// the Legal Person Type Picker
    @ViewBuilder
    private func list() -> some View {
        let persons : [LegalPerson] = personsForType(legalPersonType)
        if !persons.isEmpty {
            if legalPersonType == .none {
                List {
                    Section("Person") {
                        ForEach(personsForType(.person)) {
                            person in
                            ListTile(person: person) {
                                p in
                                legalPersonChosen(p)
                            }
                        }
                    }
                    Section("Company") {
                        ForEach(personsForType(.company)) {
                            person in
                            ListTile(person: person) {
                                p in
                                legalPersonChosen(p)
                            }
                        }
                    }
                    Section("Organization") {
                        ForEach(personsForType(.organization)) {
                            person in
                            ListTile(person: person) {
                                p in
                                legalPersonChosen(p)
                            }
                        }
                    }
                }
            } else {
                List(persons) {
                    person in
                    ListTile(person: person) {
                        p in
                        legalPersonChosen(p)
                    }
                }
            }
        } else {
            VStack {
                Spacer()
                Label("No Data found", systemImage: "xmark.circle")
                NavigationLink("Add one", destination: { AddLegalPerson() })
                Spacer()
            }
        }
    }
    
    /// Returns all the Legal Persons for the specified Type
    /// in an Array of Legal Persons
    private func personsForType(
        _ legalPersonType : LegalPerson.LegalPersonType
    ) -> [LegalPerson] {
        switch legalPersonType {
            case .person:
                return legalPersons.filter { $0 is Person }
            case .company:
                return legalPersons.filter { $0 is Company }
            case .organization:
                return legalPersons.filter { $0 is Organization }
            case .none:
                return Array(legalPersons)
        }
    }
    
    /// Call this function when a legal Person is  chosen
    /// by tappin on the List Tile
    private func legalPersonChosen(_ person : LegalPerson) -> Void {
        legalPerson = person
        dismiss()
    }
}

internal struct LegalPersonPicker_Previews: PreviewProvider {
    /// The Preview Legal Person
    @State private static var lP : LegalPerson? = LegalPerson.anonymous
    
    static var previews: some View {
        LegalPersonPicker(legalPerson: $lP)
    }
}
