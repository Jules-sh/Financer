//
//  ContentView.swift
//  Financer
//
//  Created by Julian Schumacher as ContentView.swift on 21.12.22.
//  Renamed by Julian Schumacher to Home.swift on 02.01.2023
//

import Charts
import CoreData
import SwiftUI

/// The first View shown to the User when opening
/// the App.
internal struct Home: View {
    /// The ViewContext to use when interacting with the Core Data Framework
    @Environment(\.managedObjectContext) private var viewContext
    
    /// The Wrapper of the User of this App
    @EnvironmentObject private var userWrapper : UserWrapper
    
    /// The initial State Object to inject into the Environment to
    /// be able to pass a finance between all Views.
    @StateObject private var financeWrapper : FinanceWrapper = FinanceWrapper()
    
    /// The Legal Person Wrapper to contain the Legal Person
    /// this Finance belongs to.
    @StateObject private var legalPersonWrapper : LegalPersonWrapper = LegalPersonWrapper()
    
    // Preview Code Start
    // (Comment to build)
    //
    // This Code is used in development because it works with the preview.
    // Solution from: https://developer.apple.com/forums/thread/654126
    
    /// The Finances fetched from
    /// the Core Database
    @FetchRequest(fetchRequest: financeFetchRequest)
    private var finances : FetchedResults<Finance>
    
    /// This is the fetch Request to fetch all the Finances
    /// from the Core Data Persistence Storage
    static private var financeFetchRequest : NSFetchRequest<Finance> {
        let request = Finance.fetchRequest()
        request.sortDescriptors = [
            NSSortDescriptor(
                keyPath: \Finance.date,
                ascending: false
            )
        ]
        return request
    }
    // Preview Code End
    
    
    // Production Code Start
    // (Uncomment to build)
    //
    // This Code is used in production, becasue this Code
    // is generated by Apple and it is shorter.
    // This just doesn't work with the Preview
    
    /// The Finances fetched form the
    /// Code Database.
    //    @FetchRequest(
    //        sortDescriptors: [
    //            SortDescriptor(\Finance.date, order: .reverse)
    //        ]
    //    ) private var finances : FetchedResults<Finance>
    // Production Code End
    
    /// Whether the Add View is presented or not.
    @State private var addPresented : Bool = false
    
    /// Whether the details View for a finance is presented or not.
    @State private var detailsPresented : Bool = false
    
    /// Whether the Chart Details View is presented or not.
    @State private var chartsPresented : Bool = false
    
    var body: some View {
        NavigationStack {
            List {
                Section {
                    Button {
                        chartsPresented.toggle()
                    } label: {
                        // Date comparing from: https://www.hackingwithswift.com/example-code/language/how-to-compare-dates
                        // Date calculation from: https://stackoverflow.com/questions/29465205/how-to-add-minutes-to-current-time-in-swift
                        // Answer here: https://stackoverflow.com/a/29465300/16376071
                        chart()
                    }
                    .sheet(isPresented: $chartsPresented) {
                        ChartDetails(balances: userWrapper.balance(with: finances))
                    }
                }
                Section {
                    ForEach(finances) {
                        finance in
                        Button {
                            financeWrapper.finance = finance
                            legalPersonWrapper.legalPerson = finance.legalPerson
                            detailsPresented.toggle()
                        } label: {
                            label(finance)
                        }
                        .foregroundColor(.black)
                    }
                } header: {
                    Text("Finances")
                } footer: {
                    financeFooter()
                }
            }
            Button {
                addPresented.toggle()
            } label: {
                Label("Add Finance", systemImage: "plus")
            }
            .sheet(
                isPresented: $addPresented,
                content: {
                    AddFinance()
                        .environmentObject(legalPersonWrapper)
                }
            )
            .navigationTitle("Welcome")
            .navigationBarTitleDisplayMode(.automatic)
            .sheet(isPresented: $detailsPresented) {
                FinanceDetails()
                    .environmentObject(legalPersonWrapper)
                    .environmentObject(financeWrapper)
            }
            .toolbarRole(.navigationStack)
            .toolbar(.automatic, for: .navigationBar)
            .toolbar {
                ToolbarItem(placement: .primaryAction) {
                    
                }
            }
        }
    }
    
    /// Builds, renders and returns the
    /// Chart shown on the Homescreen
    @ViewBuilder
    private func chart() -> some View {
        // TODO: make Chart only draw
        let balances = userWrapper.balance(days: 7, with: finances)
        if !balances.isEmpty {
            Chart(balances, id: \.date) {
                balance in
                LineMark(
                    x: .value(
                        "Time",
                        balance.date
                    ),
                    y: .value(
                        "Balance",
                        balance.amount
                    )
                )
            }
            .padding(.vertical, 10)
        } else {
            Section {
                Text("Charts will appear when Data are entered.")
                    .foregroundColor(.black)
            }
        }
    }
    
    /// Builds and returns the Label
    /// of a specific Finance List Object
    @ViewBuilder
    private func label(_ finance : Finance) -> some View {
        HStack {
            Image(systemName: finance is Income ? "plus" : "minus")
                .renderingMode(.original)
                .padding(.trailing, 8)
            VStack(alignment: .leading) {
                let amount : String = String(format: "%.2f$", finance.amount)
                Text(amount)
                    .font(.headline)
                    .foregroundColor(finance is Income ? .green : .red)
                // Legal Person isn't an optional Parameter, but still you have to use the ? because Swift Optional and Core Data Optional aren't the same thing
                Text(finance.legalPerson!.name!)
                // Same with the Date as above with the legal Person.
                // Only with the difference that I'm enforcing the Date here.
                Text(finance.date!, format: .dateTime.day().month().year())
                    .foregroundColor(.gray)
            }
        }
    }
    
    
    
    /// Builds, renders and returns the
    /// Footer of the Finance Section depending
    /// on the length of the FInance List
    /// => small easter egg :)
    @ViewBuilder
    private func financeFooter() -> some View {
        if finances.count > 50 {
            VStack(alignment: .leading) {
                Text("Congratulations!ðŸŽ‰")
                Text("You reached the End of the List of all Finances you ever added.")
            }
        } else {
            Text("Contains all the Finances you ever added to the App")
        }
    }
}

internal struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Home()
            .environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
    }
}
