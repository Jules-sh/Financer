//
//  ContentView.swift
//  Financer
//
//  Created by Julian Schumacher as ContentView.swift on 29.10.22.
//
//  Renamed by Julian Schumacher to Home.swift on 08.01.23
//

import SwiftUI

/// The Home View of this App, that is shown
/// when opening the App.
internal struct Home: View {
    
    // Preview Code Start
    // (Comment to build)
    //
    // This Code is used in development because it works with the preview.
    // Solution from: https://developer.apple.com/forums/thread/654126
    
    /// The Finances fetched from
    /// the Core Database
    @FetchRequest(fetchRequest: financeFetchRequest)
    private var finances : FetchedResults<Finance>
    
    /// This is the fetch Request to fetch all the Finances
    /// from the Core Data Persistence Storage
    static private var financeFetchRequest : NSFetchRequest<Finance> {
        let request = Finance.fetchRequest()
        request.sortDescriptors = [
            NSSortDescriptor(
                keyPath: \Finance.date,
                ascending: false
            )
        ]
        return request
    }
    // Preview Code End
    
    
    // Production Code Start
    // (Uncomment to build)
    //
    // This Code is used in production, becasue this Code
    // is generated by Apple and it is shorter.
    // This just doesn't work with the Preview
    
    /// The Finances fetched form the
    /// Code Database.
    //    @FetchRequest(
    //        sortDescriptors: [
    //            SortDescriptor(\Finance.date, order: .reverse)
    //        ]
    //    ) private var finances : FetchedResults<Finance>
    // Production Code End
    
    /// Whether the Home is selected or not
    @State private var homeSelected : Bool = true
    
    /// The Finance that is currently selected
    @State private var selectedFinance : Finance? = nil
    
    var body: some View {
        NavigationSplitView {
            List {
                Section("General") {
                    HStack {
                        Image(systemName: "house")
                            .renderingMode(.original)
                        Text("Home")
                        Spacer()
                    }
                    .padding(5)
                    .background(homeSelected ? Color.blue.opacity(0.5) : Color.clear)
                    .contentShape(Rectangle())
                    .cornerRadius(100)
                    .onTapGesture {
                        homeSelected = true
                        selectedFinance = nil
                    }
                }
                Section("Finances") {
                    ForEach(finances) {
                        finance in
                        financesLabel(finance)
                    }
                }
            }
        } detail: {
            if homeSelected {
                List {
                    ForEach(finances) {
                        finance in
                        ListTile(
                            name: String(finance.amount),
                            data: finance.legalPerson!.name!
                        )
                    }
                }
            } else {
                FinanceDetails(finance: selectedFinance!)
            }
        }
        // TODO: change placement
    }
    
    /// Builds, renders and returns the Label
    /// for each Finance in the Navigation Bar
    @ViewBuilder
    private func financesLabel(_ finance : Finance) -> some View {
        HStack {
            Image(systemName: finance is Income ? "plus" : "minus")
                .renderingMode(.original)
            Text(String(finance.amount))
            Spacer()
        }
        .padding(5)
        .background(finance == selectedFinance ? Color.blue : Color.clear)
        .cornerRadius(100)
        .clipShape(Rectangle())
        .onTapGesture {
            selectedFinance = finance
            homeSelected = false
        }
    }
}

internal struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        Home()
            .environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
    }
}
